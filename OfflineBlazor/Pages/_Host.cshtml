@page "/"
@namespace OfflineBlazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>OfflineBlazor</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="OfflineBlazor.styles.css" rel="stylesheet" />
</head>
<body>
    <component type="typeof(App)" render-mode="Server" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
@*    <div id="components-reconnect-modal" class="my-reconnect-modal components-reconnect-hide">
        <div class="show">
            <p>
                Message when attempting to connect to server
            </p>
        </div>
        <div class="failed">
            <p>
                Message when failing to connect
            </p>
        </div>
        <div class="rejected">
            <p>
                Message when refused
            </p>
        </div>
    </div>*@

    <div id="components-reconnect-modal">
    </div>


    <script src="_framework/blazor.server.js" autostart="false"></script>
        <script>
            console.log("######### Blazor.start ###########")
              Blazor.start({
                reconnectionOptions: {
                  maxRetries: 100000,
                  retryIntervalMilliseconds: 2000
                }
              });
     </script>

@*    <script>
       Blazor.defaultReconnectionHandler._reconnectCallback = function(d) {
            console.log("######### _reconnectCallback ###########")
            document.location.reload(); 
       }
    </script>*@

@*    <script>
        // Wait until a 'reload' button appears
        new MutationObserver((mutations, observer) => {
            if (document.querySelector('#components-reconnect-modal h5 a')) {
                // Now every 1 second(s), see if the server appears to be back, and if so, reload
                async function attemptReload() {
                    await fetch(''); // Check the server really is back
                    location.reload();
                }
                observer.disconnect();
                attemptReload();
                setInterval(attemptReload, 1000);
            }
        }).observe(document.body, { childList: true, subtree: true });
    </script>*@
</body>
</html>
